# This is a basic workflow to help you get started with Actions

name: go-services

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, refactoring-and-new-design, gh-pages ]
  pull_request:
    branches: [ main, refactoring-and-new-design, gh-pages ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# A workflow run is artifactmade up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    env:
      working-directory: ./storage_and_control
      registry: ghcr.io
      image_name: ${{ github.repository }}/db-dumper

    # The type of runner that the job will run on
    runs-on: ["ubuntu-latest"]


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.1' # The Go version to download (if necessary) and use.
      - run: |
          mkdir build
          go build -o build/gw cmd/cli/main.go
          go build -o build/gw-dumper-amd64 cmd/dumper/main.go
          GOOS=windows go build -o build/gw.exe cmd/cli/main.go
          GOOS=linux GOARCH=arm64 go build -o build/gw-arm64 cmd/cli/main.go
          GOOS=linux GOARCH=arm64 go build -o build/gw-dumper-arm64 cmd/dumper/main.go
          GOOS=linux GOARCH=arm go build -o build/gw-arm cmd/cli/main.go
          GOOS=linux GOARCH=arm go build -o build/gw-dumper-arm cmd/dumper/main.go
        working-directory: ${{ env.working-directory }}
      - uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.working-directory }}/build/*
      - uses: actions/upload-artifact@v3
        with:
          name: gw
          path: ${{ env.working-directory }}/build/gw
      - uses: actions/upload-artifact@v3
        with:
          name: gw.exe
          path: ${{ env.working-directory }}/build/gw.exe
      - uses: actions/upload-artifact@v3
        with:
          name: gw_arm64
          path: ${{ env.working-directory }}/build/gw_arm64

  build-and-push-image:
    env:
      working-directory: ./storage_and_control
      registry: ghcr.io
      image_name: ${{ github.repository }}/db-dumper

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'linux/arm64,linux/arm'

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.registry }}/${{ env.image_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./
          file: ${{ env.working-directory }}/docker/dumper/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: 'linux/arm64,linux/arm,linux/amd64'

  docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.1' # The Go version to download (if necessary) and use.
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install mkdocs-material mkdocstrings[python] mkdocstrings[go] mkdocs-extra-sass-plugin "mkdocs-minify-plugin>=0.3" "mkdocs-redirects>=1.0" mike "jinja2==3.0.3" mkdocs-autorefs mkdocs-enumerate-headings-plugin
      - run: cd storage_and_control && ./generate_static_docs.sh
      - run: mkdocs build
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      - run: mkdir ./site/dist
      - run: cp gw* ./site/dist/
      - run: cp ./.env-default ./site/dist/
      - run: cp ./install-gw.sh ./site/dist/
      - run: cp ./uninstall-gw.sh ./site/dist/
      - run: cp ./deployments/gateway/docker-compose.yml ./site/dist/
      - run: cp ./deployments/gateway/docker-compose.rpi.yml ./site/dist/docker-compose.rpi.yml
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: './site'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
